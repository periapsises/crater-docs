{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Crater","text":"<p>A type safe superset of Lua \u2014 without losing what makes Lua special.</p>"},{"location":"#what-is-crater","title":"What is Crater?","text":"<p>Crater is a typed language that compiles down to Lua. It was made to feel like Lua, but every variable and function has a type \u2014 giving you:</p> <ul> <li>\u2705 Early error detection (catch bugs before runtime)</li> <li>\u2705 Safer large-scale code</li> <li>\u2705 Better editor and tooling support</li> </ul> <p>You don't lose Lua's simplicity \u2014 you just gain structure.</p>"},{"location":"#a-basic-example","title":"A basic example","text":"<p>In Lua you might write:</p> <pre><code>local function greet(name)\n    print(\"Hello, \" .. name .. \"!\")\nend\n\ngreet(\"world\")\n</code></pre> <p>In Crater, you simply specify types to be enforced:</p> <pre><code>local function greet(name: string): void\n    print(\"Hello, \" .. name .. \"!\")\nend\n\ngreet(\"world\") -- \u2705 Type-checked\ngreet(123)     -- \u274c Error, expected string, got number\n</code></pre>"},{"location":"#why-crater","title":"Why Crater?","text":"<p>Lua is great for quick scripting and flexibility. Crater is for when you want the same Lua spirit, but with the safety and clarity of a modern language.</p> <p>That way you can focus on your project without the need to keep track of the type of every variable you are using \u2014 no more type checks at the top of functions.</p>"},{"location":"contributing/roadmap/","title":"\ud83d\ude80 Roadmap","text":""},{"location":"contributing/roadmap/#1-core-language","title":"1. Core Language","text":"<ul> <li> <p> Grammar</p> <ul> <li> Antlr4 setup</li> <li> Crater grammar</li> </ul> </li> <li> <p> Parser</p> <ul> <li> Syntax parser</li> <li> Custom tree generation</li> </ul> </li> </ul>"},{"location":"contributing/roadmap/#2-type-system","title":"2. Type System","text":"<ul> <li> <p> First-class types</p> <ul> <li> Numbers</li> <li> Strings</li> <li> Booleans</li> <li> Tables</li> <li> Functions</li> </ul> </li> <li> <p> User defined types</p> </li> <li> Tuples</li> <li> Generics</li> <li> Variadics</li> </ul>"},{"location":"contributing/roadmap/#3-libraries","title":"3. Libraries","text":"<ul> <li> <p> Import / Export</p> <ul> <li> Multi-file projects</li> <li> Functional require</li> <li> Functional module returns</li> </ul> </li> <li> <p> Standard Lua libraries</p> <ul> <li> LuaJIT</li> <li> Lua 5.1?</li> <li> Garry's Mod Lua</li> <li> StarfallEx Lua</li> </ul> </li> </ul>"},{"location":"contributing/roadmap/#4-tooling","title":"4. Tooling","text":"<ul> <li> Compiler</li> <li> Language server</li> <li> Formatter / Linter</li> </ul>"},{"location":"contributing/roadmap/#5-ecosystem","title":"5. Ecosystem","text":"<ul> <li> Documentation<ul> <li> Examples</li> <li> API Docs</li> </ul> </li> </ul>"},{"location":"contributing/roadmap/#6-future-strech-goals","title":"6. Future / Strech goals","text":"<ul> <li> Playground?</li> <li> Interop with raw Lua modules?</li> <li> Type inference?</li> </ul>"}]}